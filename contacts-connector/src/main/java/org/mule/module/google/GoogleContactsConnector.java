/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.google;

import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.oauth.OAuth;
import org.mule.api.annotations.oauth.OAuthAccessToken;
import org.mule.api.annotations.oauth.OAuthAccessTokenSecret;
import org.mule.api.annotations.oauth.OAuthConsumerKey;
import org.mule.api.annotations.oauth.OAuthConsumerSecret;
import org.mule.api.annotations.oauth.OAuthScope;
import org.mule.api.annotations.param.Optional;

import com.google.gdata.client.authn.oauth.GoogleOAuthParameters;
import com.google.gdata.client.authn.oauth.OAuthException;
import com.google.gdata.client.authn.oauth.OAuthHmacSha1Signer;
import com.google.gdata.client.contacts.ContactsService;
import com.google.gdata.data.contacts.ContactEntry;
import com.google.gdata.data.contacts.ContactFeed;
import com.google.gdata.util.ServiceException;

import java.io.IOException;
import java.net.URL;
import java.util.List;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Module(name="google-contacts", schemaVersion="1.0", 
           namespace="http://www.mulesoft.org/schema/mule/google-contacts")
@OAuth(accessTokenUrl="https://www.google.com/accounts/OAuthGetAccessToken",
       authorizationUrl="https://www.google.com/accounts/OAuthAuthorizeToken",
       requestTokenUrl="https://www.google.com/accounts/OAuthGetRequestToken")
       
public class GoogleContactsConnector
{

    @Configurable
    @OAuthConsumerSecret
    private String clientSecret;

    @Configurable
    @OAuthConsumerKey
    private String clientId;

    @OAuthScope
    @Configurable
    @Optional
    private String scope = "https://www.google.com/m8/feeds/";

    private ContactsService contactsService = new ContactsService("Mule-GoogleConnector/1.0");

    private boolean tokenInitialized;
    
    /**
     * This is a hack until this gets fixed: https://github.com/mulesoft/mule-devkit/issues/64
     * Technically this could result in multiple initialization, but that's rare and harmless
     * since there is only ever one token per connector anyway. 
     */
    protected synchronized void initAccess(String accessToken, String accessTokenSecret) throws OAuthException {
        if (tokenInitialized) {
            return;
        }
        
        GoogleOAuthParameters oauthParameters = new GoogleOAuthParameters();
        oauthParameters.setOAuthConsumerKey(getClientId());
        oauthParameters.setOAuthConsumerSecret(getClientSecret());
        oauthParameters.setOAuthToken(accessToken);
        oauthParameters.setOAuthTokenSecret(accessTokenSecret);
        contactsService.setOAuthCredentials(oauthParameters, new OAuthHmacSha1Signer());
        
        tokenInitialized = true;
    }
    
    @Processor
    public List<ContactEntry> getContacts(@OAuthAccessToken String accessToken, @OAuthAccessTokenSecret String accessTokenSecret) 
        throws OAuthException, IOException, ServiceException {
        initAccess(accessToken, accessTokenSecret);
        
        URL feedUrl = new URL("https://www.google.com/m8/feeds/contacts/default/full");
        ContactFeed resultFeed = contactsService.getFeed(feedUrl, ContactFeed.class);
        
        return resultFeed.getEntries();
    }

    public String getClientSecret() {
        return clientSecret;
    }

    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }

    public String getClientId() {
        return clientId;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }
    
}
