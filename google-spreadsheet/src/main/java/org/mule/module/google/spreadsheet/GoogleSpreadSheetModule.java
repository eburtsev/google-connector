/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.google.spreadsheet;

import java.io.IOException;
import java.net.URL;
import java.util.List;

import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.oauth.OAuth;
import org.mule.api.annotations.oauth.OAuthAccessToken;
import org.mule.api.annotations.oauth.OAuthAccessTokenSecret;
import org.mule.api.annotations.oauth.OAuthConsumerKey;
import org.mule.api.annotations.oauth.OAuthConsumerSecret;
import org.mule.api.annotations.oauth.OAuthScope;
import org.mule.api.annotations.param.Optional;

import com.google.gdata.client.authn.oauth.GoogleOAuthParameters;
import com.google.gdata.client.authn.oauth.OAuthException;
import com.google.gdata.client.authn.oauth.OAuthHmacSha1Signer;
import com.google.gdata.client.docs.DocsService;
import com.google.gdata.data.docs.DocumentListEntry;
import com.google.gdata.data.docs.DocumentListFeed;
import com.google.gdata.util.ServiceException;

/**
 * Generic module
 *
 * @author MuleSoft, Inc.
 */
@Module(name="googlespreadsheet", schemaVersion="1.0")
//@OAuth2(
//authorizationUrl="https://www.google.com/accounts/OAuthAuthorizeToken", 
//accessTokenUrl="https://www.google.com/accounts/OAuthGetAccessToken",
//callbackPath="google-spreadsheet-callback")
@OAuth(accessTokenUrl="https://www.google.com/accounts/OAuthGetAccessToken",
		authorizationUrl="https://www.google.com/accounts/OAuthAuthorizeToken",
		requestTokenUrl="https://www.google.com/accounts/OAuthGetRequestToken",
		callbackPath="oauth2callback")
public class GoogleSpreadSheetModule {
	
	/**
     * The OAuth consumer key 
     */
    @Configurable
    @OAuthConsumerKey
    private String consumerKey;

    /**
     * The OAuth consumer secret 
     */
    @Configurable
    @OAuthConsumerSecret
    private String consumerSecret;
    
    @OAuthScope
    @Configurable
    @Optional
    private String scope = "https://docs.google.com/feeds/";
    
    private DocsService docsService = null;
    
    private void connect(String accessToken, String secretToken) throws ServiceException {
    	if (docsService == null) {
    		GoogleOAuthParameters oauthParameters = new GoogleOAuthParameters();
    		oauthParameters.setOAuthConsumerKey(this.consumerKey);
    		oauthParameters.setOAuthConsumerSecret(this.consumerSecret);
    		oauthParameters.setOAuthToken(accessToken);
    		oauthParameters.setOAuthTokenSecret(secretToken);
    		this.docsService = new DocsService("Mule-GoogleDocsConnector/1.0");
    		
    		try {
    			docsService.setOAuthCredentials(oauthParameters, new OAuthHmacSha1Signer());
    		} catch (OAuthException e) { 
    			throw new ServiceException(e);
    		}
    	}
    }

    /**
     * 
     * lists first 100 documents
     *
     * {@sample.xml ../../../doc/GoogleDocs-connector.xml.sample googledocs:listDocuments}
     * 
     * @param accessToken
     * @return list of documents
     * @throws OAuthException
     * @throws IOException
     * @throws ServiceException
     */
    @Processor
    public List<DocumentListEntry> listDocuments(@OAuthAccessToken String accessToken, @OAuthAccessTokenSecret String secretToken)
    			throws OAuthException, IOException, ServiceException {
    	
        this.connect(accessToken, secretToken);
    	URL feedUrl = new URL("https://docs.google.com/feeds/default/private/full");
        DocumentListFeed resultFeed = docsService.getFeed(feedUrl, DocumentListFeed.class);
        return resultFeed.getEntries();
    }

	public String getConsumerKey() {
		return consumerKey;
	}

	public void setConsumerKey(String consumerKey) {
		this.consumerKey = consumerKey;
	}

	public String getConsumerSecret() {
		return consumerSecret;
	}

	public void setConsumerSecret(String consumerSecret) {
		this.consumerSecret = consumerSecret;
	}

	public DocsService getDocsService() {
		return docsService;
	}

	public void setDocsService(DocsService docsService) {
		this.docsService = docsService;
	}

	public String getScope() {
		return scope;
	}

	public void setScope(String scope) {
		this.scope = scope;
	}
}
